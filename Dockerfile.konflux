# Dockerfile.redhat - FIPS-compliant build for Red Hat environments
# Argument for setting the oauth2-proxy build version
ARG VERSION

# All builds should be done using the platform native to the build node to allow
#  cache sharing of the go mod download step.
# Go cross compilation is also faster than emulation the go compilation across
#  multiple platforms.
FROM --platform=${BUILDPLATFORM} registry.access.redhat.com/ubi9/go-toolset:1.24@sha256:84286c7555df503df0bd3acb86fe2ad50af82a07f35707918bb0fad312fdc193 AS builder

# Switch to root for build permissions
USER root

# Copy sources
WORKDIR $GOPATH/src/github.com/opendatahub-io/kube-auth-proxy

# Fetch dependencies
COPY go.mod go.sum ./
RUN go mod download

# Now pull in our code
COPY . .

# Arguments go here so that the previous steps can be cached if no external sources
# have changed. These arguments are automatically set by the docker engine.
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Reload version argument
ARG VERSION

# Build FIPS-compliant binary and make sure there is at least an empty key file.
#  This is useful for GCP App Engine custom runtime builds, because
#  you cannot use multiline variables in their app.yaml, so you have to
#  build the key into the container and then tell it where it is
#  by setting OAUTH2_PROXY_JWT_KEY_FILE=/etc/ssl/private/jwt_signing_key.pem
#  in app.yaml instead.
# Set the cross compilation arguments based on the TARGETPLATFORM which is
#  automatically set by the docker engine.
RUN case ${TARGETPLATFORM} in \
         "linux/amd64")  GOARCH=amd64  ;; \
         # arm64 and arm64v8 are equivalent in go and do not require a goarm
         # https://github.com/golang/go/wiki/GoArm
         "linux/arm64" | "linux/arm/v8")  GOARCH=arm64  ;; \
         "linux/ppc64le")  GOARCH=ppc64le  ;; \
         "linux/s390x")  GOARCH=s390x  ;; \
         "linux/arm/v6") GOARCH=arm GOARM=6  ;; \
         "linux/arm/v7") GOARCH=arm GOARM=7 ;; \
    esac && \
    printf "Building FIPS-compliant kube-auth-proxy for arch ${GOARCH}\n" && \
    CGO_ENABLED=1 GOOS=linux GOARCH=${GOARCH} GOEXPERIMENT=strictfipsruntime \
    go build -a -tags strictfipsruntime \
    -ldflags="-X github.com/opendatahub-io/kube-auth-proxy/v1/pkg/version.VERSION=${VERSION}" \
    -o kube-auth-proxy github.com/opendatahub-io/kube-auth-proxy/v1 && \
    touch jwt_signing_key.pem && \
    printf "Building kube-rbac-proxy for arch ${GOARCH}\n" && \
    VERSION_SEMVER=$(echo "${VERSION}" | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "v0.19.1") && \
    cd kube-rbac-proxy && GOARCH=${GOARCH} VERSION="${VERSION}" VERSION_SEMVER="${VERSION_SEMVER}" make build && \
    cd .. && printf "Building entrypoint for arch ${GOARCH}\n" && \
    CGO_ENABLED=1 GOOS=linux GOARCH=${GOARCH} GOEXPERIMENT=strictfipsruntime go build -a -tags strictfipsruntime -o entrypoint ./cmd/entrypoint


# Copy binary to FIPS-compliant runtime image
FROM registry.access.redhat.com/ubi9/ubi-minimal@sha256:7c5495d5fad59aaee12abc3cbbd2b283818ee1e814b00dbc7f25bf2d14fa4f0c
# Reload version
ARG VERSION

WORKDIR /
COPY --from=builder $GOPATH/src/github.com/opendatahub-io/kube-auth-proxy/kube-auth-proxy /bin/kube-auth-proxy
COPY --from=builder $GOPATH/src/github.com/opendatahub-io/kube-auth-proxy/kube-rbac-proxy/_output/kube-rbac-proxy /bin/kube-rbac-proxy
COPY --from=builder $GOPATH/src/github.com/opendatahub-io/kube-auth-proxy/entrypoint /bin/entrypoint
COPY --chown=1001:0 --from=builder $GOPATH/src/github.com/opendatahub-io/kube-auth-proxy/jwt_signing_key.pem /etc/ssl/private/jwt_signing_key.pem


# Set proper permissions for non-root execution
RUN chown -R 1001:0 /etc/ssl/private && \
    chmod -R g=u /etc/ssl/private && \
    chown 1001:0 /bin/kube-auth-proxy /bin/kube-rbac-proxy /bin/entrypoint && \
    chmod 755 /bin/kube-auth-proxy /bin/kube-rbac-proxy /bin/entrypoint


USER 1001

LABEL \
    com.redhat.component="odh-kube-auth-proxy" \
    name="rhoai/odh-kube-auth-proxy-rhel9" \
    description="A reverse proxy that provides authentication with Google, Azure, OpenID Connect and many more identity providers. (FIPS-compliant)." \
    summary="kube-auth-proxy" \
    maintainer="['managed-open-data-hub@redhat.com']" \
    io.openshift.expose-services="" \
    io.k8s.display-name="kube-auth-proxy" \
    io.k8s.description="kube-auth-proxy" \
    com.redhat.license_terms="https://www.redhat.com/licenses/Red_Hat_Standard_EULA_20191108.pdf"

ENTRYPOINT ["/bin/entrypoint"]
